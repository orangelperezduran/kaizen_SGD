@model GestionUI.Models.EncuestaModel


@{
    ViewBag.Title = "Editar";
    Layout = null;
    int cont = 0;
    
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <h4 style="font-family:'Tw Cen MT';color:#713712; font-weight:bold; text-align:center">Asuntos documentales</h4>
    <label style="font-family:'Tw Cen MT';color:#713712; font-weight:bold; font-size:14pt">Entidad: <label style="font-family:'Tw Cen MT';color:black;font-weight:normal">@Model.Entidad</label> </label>
    <br />
    <label style="font-family:'Tw Cen MT';color:#713712; font-weight:bold; font-size:14pt" class="col-12">Oficina: @Html.TextBoxFor(model => model.Oficina, new { Value = Model.Oficina, @class = "form-control col-12" }) </label>
    <br />
    <label style="font-family:'Tw Cen MT';color:#713712; font-weight:bold; font-size:14pt" class="col-12">Cófigo oficina:  @Html.EditorFor(model => model.CodigOficina, new { htmlAttributes = new { Value = Model.CodigOficina, @class = "form-control col-12" } })</label>
    <br />
    <label style="font-family:'Tw Cen MT';color:#713712; font-weight:bold; font-size:14pt " class="col-12">Encargado: @Html.TextBoxFor(model => model.Encargado, new { Value = Model.Encargado, @class = "form-control col-12" })</label>
    <br />
    <label style="font-family:'Tw Cen MT';color:#713712; font-weight:bold; font-size:14pt" class="col-12">Cargo del encargado:  @Html.TextBoxFor(model => model.cargo, new { Value = Model.cargo, @class = "form-control col-12" })</label>
    <br />

    @Html.HiddenFor(model => model.Entidad, new { Value = Model.Entidad })

    <hr />

    <div class="form-row">
        <p>
            <div class="pr-1" style="text-align:center">
                @Html.LabelFor(model => model.Serie, "Serie: ", htmlAttributes: new { @class = "col-form-label" })
                @Html.EditorFor(model => model.Serie, new { htmlAttributes = new { @class = "form-control", @id = "SerieE" } })
                @Html.ValidationMessageFor(model => model.Serie, "", new { @class = "text-danger" })
            </div>
            <div class="pr-1" style="text-align:center">
                @Html.LabelFor(model => model.subserie, "Subserie: ", htmlAttributes: new { @class = "col-form-label" })
                @Html.EditorFor(model => model.subserie, new { htmlAttributes = new { @class = "form-control ", @id = "subserieE" } })
                @Html.ValidationMessageFor(model => model.subserie, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 col-4" style="text-align:center">
                @Html.LabelFor(model => model.Gestion, "AG: ", htmlAttributes: new { @class = "col-form-label" })
                <center> @Html.EditorFor(model => model.Gestion, new { htmlAttributes = new { @class = "form-control" } })</center>
                @Html.ValidationMessageFor(model => model.Gestion, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 col-4" style="text-align:center">
                @Html.LabelFor(model => model.Archivo, "AC: ", htmlAttributes: new { @class = "col-form-label" })
                <center> @Html.EditorFor(model => model.Archivo, new { htmlAttributes = new { @class = "form-control" } })</center>
                @Html.ValidationMessageFor(model => model.Archivo, "", new { @class = "text-danger" })
            </div>
            <div class="pr-1" style="text-align:center">
                @Html.LabelFor(model => model.Soporte, "Soporte: ", htmlAttributes: new { @class = "col-form-label" })
                @Html.EditorFor(model => model.Soporte, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Soporte, "", new { @class = "text-danger" })
            </div>
            <div class="pr-1" style="text-align:center">
                @Html.LabelFor(model => model.DisposicionFinal, "Disposición final: ", htmlAttributes: new { @class = "col-form-label" })
                @Html.DropDownListFor(model => model.DisposicionFinal, new List<SelectListItem>{
                            new SelectListItem() {Text = "Conservación Total", Value="CT"},
                            new SelectListItem() {Text = "Conservación Total/Reproducción por medio técnico", Value="CT/M"},
                            new SelectListItem() {Text = "Eliminación", Value="E"},
                            new SelectListItem() {Text = "Selección", Value="S"},
                            new SelectListItem() {Text = "Selección/Reproducción por medio técnico", Value="S/M"},
                            new SelectListItem() {Text = "Selección/Reproducción por medio técnico/Eliminación", Value="S/M/E"},
                            new SelectListItem() {Text = "Reproducción por medio técnico/Eliminación", Value="M/E"},
           }, htmlAttributes: new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.DisposicionFinal, "", new { @class = "text-danger" })
            </div>
            <div class="pr-1" style="text-align:center">
                @Html.LabelFor(model => model.Proceso, "Proceso: ", htmlAttributes: new { @class = "col-form-label" })
                @Html.DropDownListFor(model => model.Proceso, new List<SelectListItem> {
               new SelectListItem() {Text = "Proceso Estratégico", Value="Proceso Estratégico"},
               new SelectListItem() {Text = "Proceso Misional", Value="Proceso Misional"},
               new SelectListItem() {Text = "Proceso de Apoyo", Value="Proceso de Apoyo"},
           new SelectListItem() {Text = "Proceso de seguimiento contro y mejora", Value="Proceso de seguimiento contro y mejora"},}, htmlAttributes: new { @class = "form-control col-12" })

                @Html.ValidationMessageFor(model => model.Proceso, "", new { @class = "text-danger" })
            </div>
            <div class="pr-1" style="text-align:center">
                @Html.LabelFor(model => model.Sistema, "Sistema de información: ", htmlAttributes: new { @class = "col-form-label" })
                @Html.DropDownListFor(model => model.Sistema, new List<SelectListItem> { }, htmlAttributes: new { @class = "form-control", @id = "SistemaE" })

                @Html.ValidationMessageFor(model => model.Sistema, "", new { @class = "text-danger" })
            </div>
            <div class="pr-1 col-md-4" style="text-align:center">
                @Html.LabelFor(model => model.Rol, "Rol sobre la información: ", htmlAttributes: new { @class = "col-form-label" })
                @Html.DropDownListFor(model => model.Rol, new List<SelectListItem> {
               new SelectListItem() {Text = "Propietario", Value="Propietario"},
               new SelectListItem() {Text = "Custodio", Value="Custodio"},
               new SelectListItem() {Text = "Usuario", Value="Usuario"},}, htmlAttributes: new { @class = "form-control col-12" })

                @Html.ValidationMessageFor(model => model.Rol, "", new { @class = "text-danger" })
            </div>
            <div class="pr-1 col-md-4" style="text-align:center">
                @Html.LabelFor(model => model.Clasificacion, "Clasificación de la información: ", htmlAttributes: new { @class = "col-form-label" })
                @Html.DropDownListFor(model => model.Clasificacion, new List<SelectListItem> {
               new SelectListItem() {Text = "Pública clasificada", Value="Pública clasificada"},
               new SelectListItem() {Text = "Pública reservada", Value="Pública reservada"},}, htmlAttributes: new { @class = "form-control col-12" })

                @Html.ValidationMessageFor(model => model.Clasificacion, "", new { @class = "text-danger" })
            </div>
        </p>

    </div>
    <hr />
    <h5 style="font-family:'Tw Cen MT';color:#713712; font-weight:bold">Tipologías</h5>
    <div class="form-row">
        <div id="tipos">

            @foreach (var x in Model.Tipologias)
            {
                <div>
                    <div class="form-inline p-1">
                        @{
                            string[] split = x.Split(',');
                        }
                        <input type="text" name="Tipologias" class="form-control mr-1" value="@split[0]" />
                        <label class="pl-2" style="font-family:'Tw Cen MT';color:#713712; font-weight:bold"> Formato: </label>
                        @if (split.Length == 4)
                        {
                            <div class="p-2">  <input type="text" name="formato" class="form-control mr-1" value="@split[3]" /></div>
                            <div class="p-2"><input type="checkbox" name="Orig" checked="checked" value="@cont" class="form-control mr-1" />O</div> <br />
                            <div class="p-2"><input type="checkbox" name="Cop" checked="checked" value="@cont" class="form-control mr-1" />C</div>
                        }
                        else
                        {
                            if (split.Length != 2)
                            {
                                <div class="p-2">  <input type="text" name="formato" class="form-control mr-1" value="@split[2]" /></div>
                                if (split[1].Contains("C"))
                                {
                                    <div class="p-2"><input type="checkbox" name="Orig" value="@cont" class="form-control mr-1" />O</div> <br />
                                    <div class="p-2"><input type="checkbox" name="Cop" checked="checked" value="@cont" class="form-control mr-1" />C</div>
                                }
                                else
                                {
                                    <div class="p-2"><input type="checkbox" name="Orig" checked="checked" value="@cont" class="form-control mr-1" />O</div> <br />
                                    <div class="p-2"><input type="checkbox" name="Cop" value="@cont" class="form-control mr-1" />C</div>
                                }
                            }
                            else
                            {
                                <div class="p-2">  <input type="text" name="formato" class="form-control mr-1" value="@split[1]" /></div>
                                <div class="p-2"><input type="checkbox" name="Orig" value="@cont" class="form-control mr-1" />O</div> <br />
                                <div class="p-2"><input type="checkbox" name="Cop" value="@cont" class="form-control mr-1" />C</div>
                            }

                        }
                        @if (x == Model.Tipologias[0])
                        {
                            <input type="button" onclick="AddTextBoxt()" value="+" class="btn btn-primary" style="border-radius:50%;font-family:Tw Cen MT; font-weight:bold">
                        }
                        else
                        {
                            <input type="button" onclick="RemoveTextBoxt(this)" value="-" class="btn btn-primary" style="border-radius:50%;font-family:Tw Cen MT; font-weight:bold" />
                        }
                    </div>
                </div>
                cont = cont + 1;
            }



            @Html.ValidationMessageFor(model => model.Tipologias, "", new { @class = "text-danger" })
        </div>
    </div>
    <hr />
    <div class="col-12">
        @Html.LabelFor(model => model.Observaciones, "Observaciones:", htmlAttributes: new { @class = "col-form-label" })
        @Html.EditorFor(model => model.Observaciones, new { htmlAttributes = new { @class = "form-control col-12" } })
        @Html.ValidationMessageFor(model => model.Observaciones, "", new { @class = "text-danger" })
    </div>
    <div class="col-12">
        @Html.LabelFor(model => model.recomendaciones, "Recomendaciones:", htmlAttributes: new { @class = "col-form-label" })
        @Html.EditorFor(model => model.recomendaciones, new { htmlAttributes = new { @class = "form-control col-12" } })
        @Html.ValidationMessageFor(model => model.recomendaciones, "", new { @class = "text-danger" })
    </div>
    <div class="form-inline">
        <div class="form-row col-12">
            <div class="col-12">
                <div class="form-row">
                    @Html.LabelFor(model => model.SeriesModificadas, "Series modificadas:", htmlAttributes: new { @class = "col-form-label" })
                </div>
                <div class="form-row">
                    @Html.EditorFor(model => model.SeriesModificadas, new { htmlAttributes = new { @class = "form-control col-12" } })
                    @Html.ValidationMessageFor(model => model.SeriesModificadas, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="col-12">
                <div class="form-row">
                    <label class="col-form-label">Funciones:</label>
                </div>
                <div class="form-row">
                    <select id="FuncionCE" class="form-control col-4">
                        <option>0</option>
                    </select>
                </div>
                <div class="form-row">
                    @Html.LabelFor(model => model.Funcion, "Función relacionada:", htmlAttributes: new { @class = "col-form-label" })
                </div>
                <div class="form-row">
                    @Html.EditorFor(model => model.Funcion, new { htmlAttributes = new { @class = "form-control col-12", @id = "FuncionE" } })
                    @Html.ValidationMessageFor(model => model.Funcion, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-12">
                <div class="form-row">
                    @Html.LabelFor(model => model.Procedimiento, "Procedimiento:", htmlAttributes: new { @class = "col-form-label" })
                </div>
                <div class="form-row">
                    @Html.EditorFor(model => model.Procedimiento, new { htmlAttributes = new { @class = "form-control col-12", @id = "ProcedimientoE" } })
                    @Html.ValidationMessageFor(model => model.Procedimiento, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <hr />
    <input type="submit" value="Editar" id="Editar" class="btn btn-primary col-sm-12" />
}


<style>
    .ui-autocomplete {
        z-index: 2147483647;
    }
</style>
<script>
        $(document).ready(function () {
        $('#SerieE').autocomplete({
            source: function (request, response) {
                console.log("Aqui");
                $.ajax({
                    type: "POST",
                    contentType: "application/jason; charset=utf-8",
                    url: '/Encuesta/Serie',
                    data: "{'Prefix':'" + request.term + "','oficina':'"+@Model.CodigOficina+"'}",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        console.log(data);
                        response($.map(data, function (item) {
                            return {
                                label: item.CodigoSerie+'-'+item.Serie,
                                val: item.CodigoSerie
                            }
                        }))
                    },
                    error: function (response) {
                    },
                    failure: function (response) {
                    }
                })
            },
        });
    });
    $(document).ready(function () {
        $('#subserieE').autocomplete({
            source: function (request, response) {
                $.ajax({
                    type: "POST",
                    contentType: "application/jason; charset=utf-8",
                    url: '/Encuesta/Subserie',
                    data: "{'Prefix':'" + request.term + "','oficina':'"+@Model.CodigOficina+"','codserie':'"+$('#SerieE').val()+"'}",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.CodigoSubserie + '-' + item.subserie,
                                val: item.Procedimiento,
                            };
                        }))
                    },
                    error: function (response) {
                        console.log(response);
                    },
                    failure: function (response) {
                        console.log(response);
                    }
                })
            },
            select: function (e, i) {
                $("#ProcedimientoE").val(i.item.val);
            },
        });
    });
    $(document).ready(function () {
        $.ajax({
            type: "POST",
            contentType: "application/jason; charset=utf-8",
            url: '/Encuesta/Funcion',
             data: "{'oficina':'" +@Model.CodigOficina+"'}",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var HTML = "";
                $.each(data, function (i, value) {
                    HTML = HTML + "<option value='" + value.Funcion + "'>" + value.CodigoSerie + "</option>";
                });
                $('#FuncionCE').append(HTML);
            },
            error: function (response) {
            },
            failure: function (response) {
            }
        })
    });
    $(document).ready(function () {
        $.ajax({
            type: "POST",
            contentType: "application/jason; charset=utf-8",
            url: '/Encuesta/Sistemas',
            data: "{'oficina':'" +@Model.CodigOficina+"'}",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var HTML = "";
                $.each(data, function (i, value) {
                    if ('@Model.Sistema'!=' ' && value.Funcion == '@Model.Sistema') {
                         HTML = HTML + "<option selected value='" + value.Funcion + "'>" + value.Funcion + "</option>";
                    }
                    else {
                         HTML = HTML + "<option value='" + value.Funcion + "'>" + value.Funcion + "</option>";
                    }
                });
                $('#SistemaE').append(HTML);
            },
            error: function (response) {
            },
            failure: function (response) {
            }
        })
    });
    $(document).ready(function () {
        $('#FuncionCE').change(function () {
            var x = $('#FuncionE').val();
            var y = $('#FuncionCE').val();

            console.log(x);
            console.log($('#FuncionCE').val());
            if (x == "") {
                $('#FuncionE').val(x + y);
            }
            else {
                $('#FuncionE').val(x+'\n'+y);
            }
        });
    });
    var conta=@cont;
    function AddTextBoxt() {
        var div = document.createElement('div');
        conta = conta + 1;
        div.innerHTML = getDynamicTextboxt(conta);
        document.getElementById("tipos").appendChild(div);
    }
    function RemoveTextBoxt(div) {
        conta = conta - 1;
        document.getElementById("tipos").removeChild(div.parentNode.parentNode);
    }
    function getDynamicTextboxt(value) {
        return '<div class="form-inline p-1"><input type="text" name="Tipologias" class="form-control mr-1" /><label class="pl-2" style="font-family:Tw Cen MT;color:#713712; font-weight:bold"> Formato: </label> <div class="p-2">' +
            '<input type="text" name="formato" class="form-control mr-1" /></div > <div class="p-2"><input type="checkbox" name="Orig" value="' + value + '" class="form-control mr-1" />O</div>' +
            '<div class="p-2"><input type="checkbox" name="Cop" value="' + value + '" class="form-control mr-1" />C</div><input type = "button" onclick = "RemoveTextBoxt(this)" value = "-" class="btn btn-primary" style = "border-radius:50%;font-family:Tw Cen MT; font-weight:bold" /></div >';
    }
</script>

